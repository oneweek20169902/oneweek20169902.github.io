<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Li&#39;Blog</title>
    <link>https://oneweek20169902.github.io/post.html</link>
    <description>Recent content in Posts on Li&#39;Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 20 May 2019 10:02:03 +0800</lastBuildDate>
    
	<atom:link href="https://oneweek20169902.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Reshaper快捷键汇总</title>
      <link>https://oneweek20169902.github.io/post/reshaper%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%B1%87%E6%80%BB.html</link>
      <pubDate>Mon, 20 May 2019 10:02:03 +0800</pubDate>
      
      <guid>https://oneweek20169902.github.io/post/reshaper%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%B1%87%E6%80%BB.html</guid>
      <description> 编辑 Ctrl + Space 代码完成 Ctrl + Shift + Space 代码完成 Ctrl + Alt + Space 代码完成 Ctrl + P 显示参数信息 Alt + Insert 生成构造函数，属性，重载成员函数，实现接口 Ctrl + Alt + J 生成 if,try..catch,#region 块 Ctrl + / 注释及取消//注释 Ctrl + Shift + / 注释及取消/\*\*/注释 Ctrl + W 增量选择块 Ctrl + Shift + W 增量反选 Alt + Enter 显示错误的修正方法 Ctrl + Alt + F 格式化代码 Ctrl + Alt + O 根据指示修改优化 Ctrl + D 复制当前行或选定的块  查找 Alt + F7 查找变量，方法的引用 Alt + Shift + F7 在设定范围中查找 Ctrl + Shift + F7 高亮显示 Ctrl + Alt + Up / Down 定位到下/前一个引用 Ctrl + Alt + F7 快速定位引用位置 Ctrl + Shift + F4 关闭查找结果 tab Ctrl + Alt + U 定位到查找结果  导航 Ctrl + N 定位到类型 Ctrl + Shift + N 根据文件名定位 Ctrl + E 最近文件列表 Ctrl + Shift +Backspace 上次编辑位置 Ctrl + B 跳到变量申明处 Ctrl + Alt + B 跳到继承类或接口处 Ctrl + U 调到基类 Ctrl + Shift + T 跳到类型申明处 Alt + Up / Down 跳到下/上一个方法 Ctrl + F12 F2 / Shift + F2 下/上一个高亮度显示的错误 Ctrl + Shift + E Stack Trace Refactoring F6 将类移入另外的命名空间 Shift + F6 方法更名 Ctrl + F6 更改签名 Ctrl + Alt + N Ctrl + Alt + M 将选定块抽取为一个方法 Ctrl + Alt + V 更改变量名称和类型  </description>
    </item>
    
    <item>
      <title>Hugo命令清单</title>
      <link>https://oneweek20169902.github.io/post/hugo%E7%94%9F%E6%88%90%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6.html</link>
      <pubDate>Mon, 13 May 2019 10:47:35 +0800</pubDate>
      
      <guid>https://oneweek20169902.github.io/post/hugo%E7%94%9F%E6%88%90%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6.html</guid>
      <description> 查看版本 hugo version
创建文件 hugo new 文件夹/文件名称.md，如 hugo new post/hugo生成静态文件.md
编译生成静态文件 hugo --theme=主题名称 --buildDrafts --baseUrl=&amp;quot;https://github用户名.github.io/&amp;quot; 如 hugo --theme=minimo --buildDrafts --baseUrl=&amp;quot;https://oneweek20169902.github.io/&amp;quot;
运行调试 hugo server
常用参数介绍 --bind=&amp;quot;127.0.0.1&amp;quot; 服务监听 IP 地址； -p, --port=1313 服务监听端口； -w, --watch[=true] 监听站点目录，发现文件变更自动编译； -D, --buildDrafts 包括被标记为草稿的文章； -E, --buildExpired 包括已过期的文章； -F, --buildFuture 包括将在未来发布的文章； -b, --baseURL=&amp;quot;www.datals.com&amp;quot; 服务监听域名； --log[=false]: 开启日志； --logFile=&amp;quot;/var/log/hugo.log&amp;quot;: log 输出路径； -t, --theme=&amp;quot;&amp;quot; 指定主题； -v, --verbose[=false]: 输出详细信息  </description>
    </item>
    
    <item>
      <title>常用git命令整理</title>
      <link>https://oneweek20169902.github.io/post/%E5%B8%B8%E7%94%A8git%E5%91%BD%E4%BB%A4.html</link>
      <pubDate>Mon, 13 May 2019 10:35:15 +0800</pubDate>
      
      <guid>https://oneweek20169902.github.io/post/%E5%B8%B8%E7%94%A8git%E5%91%BD%E4%BB%A4.html</guid>
      <description>新建代码仓 # 在当前目录新建一个Git代码库$ git init# 新建一个目录，将其初始化为Git代码库$ git init [project-name]# 下载一个项目和它的整个代码历史$ git clone [url] 配置 Git 的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。
# 显示当前的Git配置$ git config --list# 编辑Git配置文件$ git config -e [--global]# 设置提交代码时的用户信息$ git config [--global] user.name&amp;#34;[name]&amp;#34;$ git config [--global] user.email&amp;#34;[email address]&amp;#34; 增加/删除文件 # 添加指定文件到暂存区$ git add [file1] [file2] ...# 添加指定目录到暂存区，包括子目录$ git add [dir]# 添加当前目录的所有文件到暂存区$ git add .# 添加每个变化前，都会要求确认# 对于同一个文件的多处变化，可以实现分次提交$ git add -p# 删除工作区文件，并且将这次删除放入暂存区$ git rm [file1] [file2] ...# 停止追踪指定文件，但该文件会保留在工作区$ git rm --cached [file]# 改名文件，并且将这个改名放入暂存区$ git mv [file-original] [file-renamed] 代码提交 # 提交暂存区到仓库区$ git commit -m [message]# 提交暂存区的指定文件到仓库区$ git commit [file1] [file2] .</description>
    </item>
    
    <item>
      <title>Prettier格式化配置</title>
      <link>https://oneweek20169902.github.io/post/prettier%E6%A0%BC%E5%BC%8F%E5%8C%96%E9%85%8D%E5%90%88.html</link>
      <pubDate>Mon, 13 May 2019 10:31:39 +0800</pubDate>
      
      <guid>https://oneweek20169902.github.io/post/prettier%E6%A0%BC%E5%BC%8F%E5%8C%96%E9%85%8D%E5%90%88.html</guid>
      <description>HTML/CSS/JS/LESS 文件的 prettier 格式化规则
{ // 使能每一种语言默认格式化规则  &amp;#34;[html]&amp;#34;: { &amp;#34;editor.defaultFormatter&amp;#34;: &amp;#34;esbenp.prettier-vscode&amp;#34; }, &amp;#34;[css]&amp;#34;: { &amp;#34;editor.defaultFormatter&amp;#34;: &amp;#34;esbenp.prettier-vscode&amp;#34; }, &amp;#34;[less]&amp;#34;: { &amp;#34;editor.defaultFormatter&amp;#34;: &amp;#34;esbenp.prettier-vscode&amp;#34; }, &amp;#34;[javascript]&amp;#34;: { &amp;#34;editor.defaultFormatter&amp;#34;: &amp;#34;esbenp.prettier-vscode&amp;#34; }, /* prettier的配置 */ &amp;#34;prettier.printWidth&amp;#34;: 100, // 超过最大值换行  &amp;#34;prettier.tabWidth&amp;#34;: 4, // 缩进字节数  &amp;#34;prettier.useTabs&amp;#34;: false, // 缩进不使用tab，使用空格  &amp;#34;prettier.semi&amp;#34;: true, // 句尾添加分号  &amp;#34;prettier.singleQuote&amp;#34;: true, // 使用单引号代替双引号  &amp;#34;prettier.proseWrap&amp;#34;: &amp;#34;preserve&amp;#34;, // 默认值。因为使用了一些折行敏感型的渲染器（如GitHub comment）而按照markdown文本样式进行折行  &amp;#34;prettier.arrowParens&amp;#34;: &amp;#34;avoid&amp;#34;, // (x) =&amp;gt; {} 箭头函数参数只有一个时是否要有小括号。avoid：省略括号  &amp;#34;prettier.</description>
    </item>
    
    <item>
      <title>CAP原则和BASE定理</title>
      <link>https://oneweek20169902.github.io/post/cap%E5%8E%9F%E5%88%99%E5%92%8Cbase%E5%AE%9A%E7%90%86.html</link>
      <pubDate>Tue, 07 May 2019 17:47:59 +0800</pubDate>
      
      <guid>https://oneweek20169902.github.io/post/cap%E5%8E%9F%E5%88%99%E5%92%8Cbase%E5%AE%9A%E7%90%86.html</guid>
      <description>简介  CAP 原则又称 CAP 定力，指的是在一个分布式系统中，Consistency(一致性)、Available(可用性)、Partition tolerance(分区容错性)，三者不可得兼。
 分布式系统的 CAP 理论：理论首先把分布式系统中的三个特性进行了如下归纳：
 一致性&amp;copy;:在分布式系统中的所有数据备份，在同一时刻是否是同样的值。(等同于所有节点访问同一份最新的数据副本) 可用性(A):在集群中的一部分节点故障后，集群整体是否还能响应客户端的读写请求。(对数据更新具备高可用性) 分区容错性(P):以实际效果而言，分区相当于对通信的时限要求。系统如果不能再时限内达成数据性一致性，就意味着发生了分区的情况，必须就当前操作在 C 和 A 直接作出选择。  以 CAP 理论为基础的三种解决方案 两段提交 所谓的两个阶段是指：第一阶段：准备阶段(投票阶段)和第二阶段：提交阶段（执行阶段）。
准备阶段 1.协调者节点向所有参与者节点询问是否可以执行提交操作(vote)，并开始等待各参与者节点的响应。 2.参与者节点执行询问发起为止的所有事务操作，并将 Undo 信息和 Redo 信息写入日志。（注意：若成功这里其实每个参与者已经执行了事务操作）. 3.各参与者节点响应协调者节点发起的询问。如果参与者节点的事务操作实际执行成功，则它返回一个同意消息；如果参与者节点的事务操作实际执行失败，则它返回一个中止消息。
提交阶段 如果协调者收到了参与者的失败消息或者超时，直接给每个参与者发送回滚(Rollback)消息；否则，发送提交(Commit)消息；参与者根据协调者的指令执行提交或者回滚操作，释放所有事务处理过程中使用的锁资源。(注意:必须在最后阶段释放锁资源) 接下来分两种情况分别讨论提交阶段的过程。 当协调者节点从所有参与者节点获得的相应消息都为同意时：
 1.协调者节点向所有参与者节点发出正式提交(commit)的请求。 2.参与者节点正式完成操作，并释放在整个事务期间内占用的资源。 3.参与者节点向协调者节点发送完成消息。 4.协调者节点受到所有参与者节点反馈的完成消息后，完成事务。
如果任一参与者节点在第一阶段返回的响应消息为中止，或者 协调者节点在第一阶段的询问超时之前无法获取所有参与者节点的响应消息时：
  1.协调者节点向所有参与者节点发出回滚操作(rollback)的请求。 2.参与者节点利用之前写入的 Undo 信息执行回滚，并释放在整个事务期间内占用的资源。 3.参与者节点向协调者节点发送回滚完成消息。 4.协调者节点受到所有参与者节点反馈的回滚完成消息后，取消事务。 不管最后结果如何，第二阶段都会结束当前事务。
二阶段提交看起来确实能够提供原子性的操作，但是不幸的事，二阶段提交还是有几个缺点的： 1.同步阻塞问题。执行过程中，所有参与节点都是事务阻塞型的。当参与者占有公共资源时，其他第三方节点访问公共资源不得不处于阻塞状态。 2.单点故障。由于协调者的重要性，一旦协调者发生故障。参与者会一直阻塞下去。尤其在第二阶段，协调者发生故障，那么所有的参与者还都处于锁定事务资源的状态中，而无法继续完成事务操作。（如果是协调者挂掉，可以重新选举一个协调者，但是无法解决因为协调者宕机导致的参与者处于阻塞状态的问题） 3.数据不一致。在二阶段提交的阶段二中，当协调者向参与者发送 commit 请求之后，发生了局部网络异常或者在发送 commit 请求过程中协调者发生了故障，这回导致只有一部分参与者接受到了 commit 请求。而在这部分参与者接到 commit 请求之后就会执行 commit 操作。但是其他部分未接到 commit 请求的机器则无法执行事务提交。于是整个分布式系统便出现了数据部一致性的现象。 4.</description>
    </item>
    
    <item>
      <title>Httpclient请求卡顿的解决方法</title>
      <link>https://oneweek20169902.github.io/post/httpclient%E8%AF%B7%E6%B1%82%E5%8D%A1%E9%A1%BF%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95.html</link>
      <pubDate>Tue, 07 May 2019 16:48:38 +0800</pubDate>
      
      <guid>https://oneweek20169902.github.io/post/httpclient%E8%AF%B7%E6%B1%82%E5%8D%A1%E9%A1%BF%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95.html</guid>
      <description>var handler = new HttpClientHandler() { AutomaticDecompression = DecompressionMethods.GZip,UseProxy = false }; using (var http = new HttpClient( handler )) { if (headers != null) { foreach (KeyValuePair&amp;lt;string,string&amp;gt; header in headers) { http.DefaultRequestHeaders.Add( header.Key,header.Value ); } } if (timeout &amp;gt; 0) { http.Timeout = new TimeSpan( 0,0,timeout ); } var response = http.GetAsync( address ); if (!response.Result.IsSuccessStatusCode) { return new FunctionResult&amp;lt;TData&amp;gt;() { Code = ApiStatusCode.ServerError,Message = &amp;#34;&amp;#34; }; } var json = response.</description>
    </item>
    
    <item>
      <title>EntityFrameworkCore将数据库Timestamp类型在程序中转为long类型</title>
      <link>https://oneweek20169902.github.io/post/entityframeworkcore%E5%B0%86%E6%95%B0%E6%8D%AE%E5%BA%93timestamp%E7%B1%BB%E5%9E%8B%E5%9C%A8%E7%A8%8B%E5%BA%8F%E4%B8%AD%E8%BD%AC%E4%B8%BAlong%E7%B1%BB%E5%9E%8B.html</link>
      <pubDate>Tue, 07 May 2019 16:39:11 +0800</pubDate>
      
      <guid>https://oneweek20169902.github.io/post/entityframeworkcore%E5%B0%86%E6%95%B0%E6%8D%AE%E5%BA%93timestamp%E7%B1%BB%E5%9E%8B%E5%9C%A8%E7%A8%8B%E5%BA%8F%E4%B8%AD%E8%BD%AC%E4%B8%BAlong%E7%B1%BB%E5%9E%8B.html</guid>
      <description>Entity
public class Entity { public ulong RowVersion { get; set; } // anymore byte[] }  Context
modelBuilder.Entity&amp;lt;Entity&amp;gt;(entity =&amp;gt; { entity .Property(e =&amp;gt; e.RowVersion) .HasConversion(new NumberToBytesConverter&amp;lt;ulong&amp;gt;()) .IsRowVersion(); });  In Query
ulong sinceRowVersion; ... .Where(e =&amp;gt; e.RowVersion &amp;gt; sinceRowVersion); ... </description>
    </item>
    
    <item>
      <title>Centos7发布linux</title>
      <link>https://oneweek20169902.github.io/post/centos7%E5%8F%91%E5%B8%83linux.html</link>
      <pubDate>Tue, 07 May 2019 16:37:46 +0800</pubDate>
      
      <guid>https://oneweek20169902.github.io/post/centos7%E5%8F%91%E5%B8%83linux.html</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
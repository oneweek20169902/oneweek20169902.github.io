<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>git on Li&#39;Blog</title>
    <link>https://oneweek20169902.github.io/tags/git.html</link>
    <description>Recent content in git on Li&#39;Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 13 May 2019 10:35:15 +0800</lastBuildDate>
    
	<atom:link href="https://oneweek20169902.github.io/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>常用git命令整理</title>
      <link>https://oneweek20169902.github.io/post/%E5%B8%B8%E7%94%A8git%E5%91%BD%E4%BB%A4.html</link>
      <pubDate>Mon, 13 May 2019 10:35:15 +0800</pubDate>
      
      <guid>https://oneweek20169902.github.io/post/%E5%B8%B8%E7%94%A8git%E5%91%BD%E4%BB%A4.html</guid>
      <description>新建代码仓 # 在当前目录新建一个Git代码库$ git init# 新建一个目录，将其初始化为Git代码库$ git init [project-name]# 下载一个项目和它的整个代码历史$ git clone [url] 配置 Git 的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。
# 显示当前的Git配置$ git config --list# 编辑Git配置文件$ git config -e [--global]# 设置提交代码时的用户信息$ git config [--global] user.name&amp;#34;[name]&amp;#34;$ git config [--global] user.email&amp;#34;[email address]&amp;#34; 增加/删除文件 # 添加指定文件到暂存区$ git add [file1] [file2] ...# 添加指定目录到暂存区，包括子目录$ git add [dir]# 添加当前目录的所有文件到暂存区$ git add .# 添加每个变化前，都会要求确认# 对于同一个文件的多处变化，可以实现分次提交$ git add -p# 删除工作区文件，并且将这次删除放入暂存区$ git rm [file1] [file2] ...# 停止追踪指定文件，但该文件会保留在工作区$ git rm --cached [file]# 改名文件，并且将这个改名放入暂存区$ git mv [file-original] [file-renamed] 代码提交 # 提交暂存区到仓库区$ git commit -m [message]# 提交暂存区的指定文件到仓库区$ git commit [file1] [file2] .</description>
    </item>
    
  </channel>
</rss>
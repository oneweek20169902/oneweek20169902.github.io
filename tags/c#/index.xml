<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C# on Li&#39;Blog</title>
    <link>https://oneweek20169902.github.io/tags/c#.html</link>
    <description>Recent content in C# on Li&#39;Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 20 May 2019 13:58:28 +0800</lastBuildDate>
    
	<atom:link href="https://oneweek20169902.github.io/tags/c#/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C#编码规范</title>
      <link>https://oneweek20169902.github.io/post/c#%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83.html</link>
      <pubDate>Mon, 20 May 2019 13:58:28 +0800</pubDate>
      
      <guid>https://oneweek20169902.github.io/post/c#%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83.html</guid>
      <description>1 前言 1.1 编写目的 为了保证大家编写出的程序都使用统一的风格，以方便阅读和后期维护。
编码规范对于程序员而言尤为重要，主要有以下几个原因：
 一个软件的生命周期中，80%的花费在于维护。
 几乎没有任何一个软件，在其整个生命周期中，均有最初的人员来维护。
 编码规范可以改善软件的可读性，可以让程序员尽快而彻底的理解新的代码。
 编码规范可以保证代码阅读者在阅读代码时产生尽可能少的歧义。
 编码规范可以使我们的代码统一、美观，可以一眼看出我们是专业的团队。
  编码规范的核心出发点是
 让其他人能够快速，准确的知道代码的作用并且确保不会出现歧义（其他人包括一段时间后的自己）
 让我们的代码看着更加清晰、美观、专业、统一。
  2 命名规范 任何标识符的名字都应该可以简单、清楚、正确的表示出该标识符的作用。
同时我们要将尽可能多的信息装入到标识符的名字当中去，以便阅读代码的人可以快速的读懂代码。
2.1 命名约定 我们在命名标识符时（包括参数，常量，变量），应该使用单词的首字母大小写来区分一个标识符中的多个单词，如 UserName。
2.1.1 PascalCasing PascalCasing包含一个到多个单词，每一个单词第一个字母大写，其余字母均小写。例如：HelloWorld、SetName 等。
除了参数、变量、常量外，所有命名空间、类、函数、接口、属性、事件、枚举等名称的命名，使用 Pascal 风格。
2.1.2 camelCasing camelCasing包含一个到多个单词，第一个单词首字母小写，其余单词首字母大写。例如：name、productId 等。
参数与变量的命名使用 camelCasing。
2.1.3 UPPER_CAPS UPPER_CAPS包含一个到多个单词， 单词的所有字母都大写，单词与单词之间使用“_”连接，该风格目前在 C#中只用于 const 常量。
如：public const string DEFAULT_PAGE = &amp;quot;DEFAULT_PAGE&amp;quot;;
2.1.4 私有变量的命名 Private 的私有变量使用下划线”\_”+camelCasing 的大小写规则，以便快速 确认该变量的作用域。
如：private int \_userId;
2.1.5 首字母缩写词的大小写 首字母的缩写词是由一个短语的字母组成的，如Xml(Extensible Markup Language)**，**IO(Input andOutput)。它和单词的缩写是有区别的，单词缩写仅仅是把一个单词的长度变短。</description>
    </item>
    
  </channel>
</rss>
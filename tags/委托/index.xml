<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>委托 on Li&#39;Blog</title>
    <link>https://oneweek20169902.github.io/tags/%E5%A7%94%E6%89%98.html</link>
    <description>Recent content in 委托 on Li&#39;Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 24 Jul 2019 10:53:05 +0800</lastBuildDate>
    
	<atom:link href="https://oneweek20169902.github.io/tags/%E5%A7%94%E6%89%98/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C#各种委托介绍</title>
      <link>https://oneweek20169902.github.io/post/c#%E5%90%84%E7%A7%8D%E5%A7%94%E6%89%98%E4%BB%8B%E7%BB%8D.html</link>
      <pubDate>Wed, 24 Jul 2019 10:53:05 +0800</pubDate>
      
      <guid>https://oneweek20169902.github.io/post/c#%E5%90%84%E7%A7%8D%E5%A7%94%E6%89%98%E4%BB%8B%E7%BB%8D.html</guid>
      <description>委托是一个类，它定义了方法的类型，使得可以将方法当作另一个方法的参数来进行传递。事件是一种特殊的委托。
一、委托的声明 Delegate Delegate 我们常用到的一种声明 Delegate 至少 0 个参数，至多 32 个参数，可以无返回值，也可以指定返回值类型。
public delegate int MethodtDelegate(int x, int y);表示有两个参数，并返回int型。  Action Action 是无返回值的泛型委托。 Action 表示无参，无返回值的委托。 Action 表示有传入参数 int,string 无返回值的委托。 Action 表示有传入参数 int,string,bool 无返回值的委托。 Action 表示有传入 4 个 int 型参数，无返回值的委托。 Action 至少 0 个参数，至多 16 个参数，无返回值。
public void Test&amp;lt;T&amp;gt;(Action&amp;lt;T&amp;gt; action,T p) { action(p); }  Func Func 是有返回值的泛型委托 Func 表示无参，返回值为 int 的委托 Func 表示传入参数为 object, string 返回值为 int 的委托 Func 表示传入参数为 object, string 返回值为 int 的委托 Func 表示传入参数为 T1,T2,,T3(泛型)返回值为 int 的委托 Func 至少 0 个参数，至多 16 个参数，根据返回值泛型返回。必须有返回值，不可 void</description>
    </item>
    
  </channel>
</rss>
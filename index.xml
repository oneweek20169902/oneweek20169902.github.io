<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on Li&#39;Blog</title>
    <link>https://oneweek20169902.github.io/</link>
    <description>Recent content in Home on Li&#39;Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 07 May 2019 17:47:59 +0800</lastBuildDate>
    
	<atom:link href="https://oneweek20169902.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CAP原则和BASE定理</title>
      <link>https://oneweek20169902.github.io/post/cap%E5%8E%9F%E5%88%99%E5%92%8Cbase%E5%AE%9A%E7%90%86.html</link>
      <pubDate>Tue, 07 May 2019 17:47:59 +0800</pubDate>
      
      <guid>https://oneweek20169902.github.io/post/cap%E5%8E%9F%E5%88%99%E5%92%8Cbase%E5%AE%9A%E7%90%86.html</guid>
      <description>简介  CAP 原则又称 CAP 定力，指的是在一个分布式系统中，Consistency(一致性)、Available(可用性)、Partition tolerance(分区容错性)，三者不可得兼。
 分布式系统的 CAP 理论：理论首先把分布式系统中的三个特性进行了如下归纳：
 一致性&amp;copy;:在分布式系统中的所有数据备份，在同一时刻是否是同样的值。(等同于所有节点访问同一份最新的数据副本) 可用性(A):在集群中的一部分节点故障后，集群整体是否还能响应客户端的读写请求。(对数据更新具备高可用性) 分区容错性(P):以实际效果而言，分区相当于对通信的时限要求。系统如果不能再时限内达成数据性一致性，就意味着发生了分区的情况，必须就当前操作在 C 和 A 直接作出选择。  以 CAP 理论为基础的三种解决方案 两段提交 所谓的两个阶段是指：第一阶段：准备阶段(投票阶段)和第二阶段：提交阶段（执行阶段）。
准备阶段 1.协调者节点向所有参与者节点询问是否可以执行提交操作(vote)，并开始等待各参与者节点的响应。 2.参与者节点执行询问发起为止的所有事务操作，并将 Undo 信息和 Redo 信息写入日志。（注意：若成功这里其实每个参与者已经执行了事务操作）. 3.各参与者节点响应协调者节点发起的询问。如果参与者节点的事务操作实际执行成功，则它返回一个同意消息；如果参与者节点的事务操作实际执行失败，则它返回一个中止消息。
提交阶段 如果协调者收到了参与者的失败消息或者超时，直接给每个参与者发送回滚(Rollback)消息；否则，发送提交(Commit)消息；参与者根据协调者的指令执行提交或者回滚操作，释放所有事务处理过程中使用的锁资源。(注意:必须在最后阶段释放锁资源) 接下来分两种情况分别讨论提交阶段的过程。 当协调者节点从所有参与者节点获得的相应消息都为同意时：
 1.协调者节点向所有参与者节点发出正式提交(commit)的请求。 2.参与者节点正式完成操作，并释放在整个事务期间内占用的资源。 3.参与者节点向协调者节点发送完成消息。 4.协调者节点受到所有参与者节点反馈的完成消息后，完成事务。
如果任一参与者节点在第一阶段返回的响应消息为中止，或者 协调者节点在第一阶段的询问超时之前无法获取所有参与者节点的响应消息时：
  1.协调者节点向所有参与者节点发出回滚操作(rollback)的请求。 2.参与者节点利用之前写入的 Undo 信息执行回滚，并释放在整个事务期间内占用的资源。 3.参与者节点向协调者节点发送回滚完成消息。 4.协调者节点受到所有参与者节点反馈的回滚完成消息后，取消事务。 不管最后结果如何，第二阶段都会结束当前事务。
二阶段提交看起来确实能够提供原子性的操作，但是不幸的事，二阶段提交还是有几个缺点的： 1.同步阻塞问题。执行过程中，所有参与节点都是事务阻塞型的。当参与者占有公共资源时，其他第三方节点访问公共资源不得不处于阻塞状态。 2.单点故障。由于协调者的重要性，一旦协调者发生故障。参与者会一直阻塞下去。尤其在第二阶段，协调者发生故障，那么所有的参与者还都处于锁定事务资源的状态中，而无法继续完成事务操作。（如果是协调者挂掉，可以重新选举一个协调者，但是无法解决因为协调者宕机导致的参与者处于阻塞状态的问题） 3.数据不一致。在二阶段提交的阶段二中，当协调者向参与者发送 commit 请求之后，发生了局部网络异常或者在发送 commit 请求过程中协调者发生了故障，这回导致只有一部分参与者接受到了 commit 请求。而在这部分参与者接到 commit 请求之后就会执行 commit 操作。但是其他部分未接到 commit 请求的机器则无法执行事务提交。于是整个分布式系统便出现了数据部一致性的现象。 4.</description>
    </item>
    
    <item>
      <title>Httpclient请求卡顿的解决方法</title>
      <link>https://oneweek20169902.github.io/post/httpclient%E8%AF%B7%E6%B1%82%E5%8D%A1%E9%A1%BF%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95.html</link>
      <pubDate>Tue, 07 May 2019 16:48:38 +0800</pubDate>
      
      <guid>https://oneweek20169902.github.io/post/httpclient%E8%AF%B7%E6%B1%82%E5%8D%A1%E9%A1%BF%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95.html</guid>
      <description>var handler = new HttpClientHandler() { AutomaticDecompression = DecompressionMethods.GZip,UseProxy = false }; using (var http = new HttpClient( handler )) { if (headers != null) { foreach (KeyValuePair&amp;lt;string,string&amp;gt; header in headers) { http.DefaultRequestHeaders.Add( header.Key,header.Value ); } } if (timeout &amp;gt; 0) { http.Timeout = new TimeSpan( 0,0,timeout ); } var response = http.GetAsync( address ); if (!response.Result.IsSuccessStatusCode) { return new FunctionResult&amp;lt;TData&amp;gt;() { Code = ApiStatusCode.ServerError,Message = &amp;#34;&amp;#34; }; } var json = response.</description>
    </item>
    
    <item>
      <title>EntityFrameworkCore将数据库Timestamp类型在程序中转为long类型</title>
      <link>https://oneweek20169902.github.io/post/entityframeworkcore%E5%B0%86%E6%95%B0%E6%8D%AE%E5%BA%93timestamp%E7%B1%BB%E5%9E%8B%E5%9C%A8%E7%A8%8B%E5%BA%8F%E4%B8%AD%E8%BD%AC%E4%B8%BAlong%E7%B1%BB%E5%9E%8B.html</link>
      <pubDate>Tue, 07 May 2019 16:39:11 +0800</pubDate>
      
      <guid>https://oneweek20169902.github.io/post/entityframeworkcore%E5%B0%86%E6%95%B0%E6%8D%AE%E5%BA%93timestamp%E7%B1%BB%E5%9E%8B%E5%9C%A8%E7%A8%8B%E5%BA%8F%E4%B8%AD%E8%BD%AC%E4%B8%BAlong%E7%B1%BB%E5%9E%8B.html</guid>
      <description>Entity
public class Entity { public ulong RowVersion { get; set; } // anymore byte[] }  Context
modelBuilder.Entity&amp;lt;Entity&amp;gt;(entity =&amp;gt; { entity .Property(e =&amp;gt; e.RowVersion) .HasConversion(new NumberToBytesConverter&amp;lt;ulong&amp;gt;()) .IsRowVersion(); });  In Query
ulong sinceRowVersion; ... .Where(e =&amp;gt; e.RowVersion &amp;gt; sinceRowVersion); ... </description>
    </item>
    
    <item>
      <title>Centos7发布linux</title>
      <link>https://oneweek20169902.github.io/post/centos7%E5%8F%91%E5%B8%83linux.html</link>
      <pubDate>Tue, 07 May 2019 16:37:46 +0800</pubDate>
      
      <guid>https://oneweek20169902.github.io/post/centos7%E5%8F%91%E5%B8%83linux.html</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://oneweek20169902.github.io/.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://oneweek20169902.github.io/.html</guid>
      <description>type: page layout: search outputs: - html - json</description>
    </item>
    
  </channel>
</rss>